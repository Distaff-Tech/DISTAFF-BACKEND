{"version":3,"sources":["ngx-smart-modal.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","ngxSmartModal","core","common","this","NgxSmartModalConfig","bodyClassOpen","prefixEvent","NgxSmartModalComponent","_renderer","_changeDetectorRef","_document","_platformId","closable","escapable","dismissable","identifier","customClass","visible","backdrop","force","hideDelay","autostart","target","ariaLabel","ariaLabelledBy","ariaDescribedBy","visibleChange","EventEmitter","onClose","onCloseFinished","onDismiss","onDismissFinished","onAnyCloseEvent","onAnyCloseEventFinished","onOpen","onOpenFinished","onEscape","onDataAdded","onDataRemoved","layerPosition","overlayVisible","openedClass","createFrom","prototype","ngOnInit","length","Error","_sendEvent","ngOnDestroy","open","top","close","dismiss","e","classList","contains","toggle","addCustomClass","className","removeCustomClass","replace","trim","isVisible","hasData","undefined","_data","setData","data","emit","markForCheck","getData","removeData","addBodyClass","addClass","body","removeBodyClass","removeClass","detectChanges","targetPlacement","isBrowser","nsmDialog","nsmContent","nsmOverlay","targetElement","querySelector","targetElementRect","getBoundingClientRect","bodyRect","first","nativeElement","nsmContentRect","nsmDialogRect","marginLeft","parseInt","getComputedStyle","marginTop","offsetTop","height","offsetLeft","left","width","setStyle","name","extraData","instance","id","modal","event","CustomEvent","detail","window","dispatchEvent","Object","defineProperty","get","isPlatformBrowser","enumerable","configurable","decorators","type","Component","args","selector","template","ctorParameters","Renderer2","ChangeDetectorRef","Inject","DOCUMENT","PLATFORM_ID","propDecorators","Input","Output","ViewChildren","HostListener","NgxSmartModalStackService","_modalStack","addModal","modalInstance","i","findIndex","o","push","getModal","find","getModalStack","getOpenedModals","filter","getTopOpenedModal","map","reduce","highest","item","getHigherIndex","Math","max","apply","concat","getModalStackCount","removeModal","splice","Injectable","NgxSmartModalService","_componentFactoryResolver","_appRef","_injector","_this","_escapeKeyboardEvent","key","closeLatestModal","_trapFocusModal","document","activeElement","preventDefault","stopPropagation","focus","_addEvents","_openModal","_closeModal","closeAll","forEach","_toggleModal","setModalData","getModalData","resetModalData","removed","create","content","options","componentFactory","resolveComponentFactory","ngContent","_resolveNgContent","componentRef","attachView","hostView","domElem","rootNodes","appendChild","addEventListener","_initModal","_deleteModal","_dismissModal","lastElementFocused","setTimeout","setAttribute","removeEventListener","removeAttribute","createTextNode","TemplateRef","createEmbeddedView","location","ComponentFactoryResolver","ApplicationRef","Injector","NgxSmartModalModule","serivce","forRoot","ngModule","providers","forChild","NgModule","declarations","entryComponents","imports","CommonModule","Éµa","value"],"mappings":"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","file":"ngx-smart-modal.umd.min.js.map","sourcesContent":["(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :\n\ttypeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common'], factory) :\n\t(factory((global.ng = global.ng || {}, global.ng.ngxSmartModal = {}),global.ng.core,global.ng.common));\n}(this, (function (exports,core,common) { 'use strict';\n\n/**\n * @license ngx-smart-modal\n * MIT license\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NgxSmartModalConfig = {\n    bodyClassOpen: 'dialog-open',\n    prefixEvent: 'ngx-smart-modal.'\n};\n/**\n * @record\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NgxSmartModalComponent = (function () {\n    function NgxSmartModalComponent(_renderer, _changeDetectorRef, _document, _platformId) {\n        this._renderer = _renderer;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._document = _document;\n        this._platformId = _platformId;\n        this.closable = true;\n        this.escapable = true;\n        this.dismissable = true;\n        this.identifier = '';\n        this.customClass = 'nsm-dialog-animation-fade';\n        this.visible = false;\n        this.backdrop = true;\n        this.force = true;\n        this.hideDelay = 500;\n        this.autostart = false;\n        this.target = '';\n        this.ariaLabel = null;\n        this.ariaLabelledBy = null;\n        this.ariaDescribedBy = null;\n        this.visibleChange = new core.EventEmitter();\n        this.onClose = new core.EventEmitter();\n        this.onCloseFinished = new core.EventEmitter();\n        this.onDismiss = new core.EventEmitter();\n        this.onDismissFinished = new core.EventEmitter();\n        this.onAnyCloseEvent = new core.EventEmitter();\n        this.onAnyCloseEventFinished = new core.EventEmitter();\n        this.onOpen = new core.EventEmitter();\n        this.onOpenFinished = new core.EventEmitter();\n        this.onEscape = new core.EventEmitter();\n        this.onDataAdded = new core.EventEmitter();\n        this.onDataRemoved = new core.EventEmitter();\n        this.layerPosition = 1041;\n        this.overlayVisible = false;\n        this.openedClass = false;\n        this.createFrom = 'html';\n    }\n    /**\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        if (!this.identifier || !this.identifier.length) {\n            throw new Error('identifier field isnât set. Please set one before calling <ngx-smart-modal> in a template.');\n        }\n        this._sendEvent('create');\n    };\n    /**\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._sendEvent('delete');\n    };\n    /**\n     * Open the modal instance\n     *\n     * @param {?=} top open the modal top of all other\n     * @return {?} the modal component\n     */\n    NgxSmartModalComponent.prototype.open = /**\n     * Open the modal instance\n     *\n     * @param {?=} top open the modal top of all other\n     * @return {?} the modal component\n     */\n    function (top) {\n        this._sendEvent('open', { top: top });\n        return this;\n    };\n    /**\n     * Close the modal instance\n     *\n     * @return {?} the modal component\n     */\n    NgxSmartModalComponent.prototype.close = /**\n     * Close the modal instance\n     *\n     * @return {?} the modal component\n     */\n    function () {\n        this._sendEvent('close');\n        return this;\n    };\n    /**\n     * Dismiss the modal instance\n     *\n     * @param {?} e the event sent by the browser\n     * @return {?} the modal component\n     */\n    NgxSmartModalComponent.prototype.dismiss = /**\n     * Dismiss the modal instance\n     *\n     * @param {?} e the event sent by the browser\n     * @return {?} the modal component\n     */\n    function (e) {\n        if (!this.dismissable || !e.target.classList.contains('overlay')) {\n            return this;\n        }\n        this._sendEvent('dismiss');\n        return this;\n    };\n    /**\n     * Toggle visibility of the modal instance\n     *\n     * @param {?=} top open the modal top of all other\n     * @return {?} the modal component\n     */\n    NgxSmartModalComponent.prototype.toggle = /**\n     * Toggle visibility of the modal instance\n     *\n     * @param {?=} top open the modal top of all other\n     * @return {?} the modal component\n     */\n    function (top) {\n        this._sendEvent('toggle', { top: top });\n        return this;\n    };\n    /**\n     * Add a custom class to the modal instance\n     *\n     * @param {?} className the class to add\n     * @return {?} the modal component\n     */\n    NgxSmartModalComponent.prototype.addCustomClass = /**\n     * Add a custom class to the modal instance\n     *\n     * @param {?} className the class to add\n     * @return {?} the modal component\n     */\n    function (className) {\n        if (!this.customClass.length) {\n            this.customClass = className;\n        }\n        else {\n            this.customClass += ' ' + className;\n        }\n        return this;\n    };\n    /**\n     * Remove a custom class to the modal instance\n     *\n     * @param {?=} className the class to remove\n     * @return {?} the modal component\n     */\n    NgxSmartModalComponent.prototype.removeCustomClass = /**\n     * Remove a custom class to the modal instance\n     *\n     * @param {?=} className the class to remove\n     * @return {?} the modal component\n     */\n    function (className) {\n        if (className) {\n            this.customClass = this.customClass.replace(className, '').trim();\n        }\n        else {\n            this.customClass = '';\n        }\n        return this;\n    };\n    /**\n     * Returns the visibility state of the modal instance\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.isVisible = /**\n     * Returns the visibility state of the modal instance\n     * @return {?}\n     */\n    function () {\n        return this.visible;\n    };\n    /**\n     * Checks if data is attached to the modal instance\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.hasData = /**\n     * Checks if data is attached to the modal instance\n     * @return {?}\n     */\n    function () {\n        return this._data !== undefined;\n    };\n    /**\n     * Attach data to the modal instance\n     *\n     * @param {?} data the data to attach\n     * @param {?=} force override potentially attached data\n     * @return {?} the modal component\n     */\n    NgxSmartModalComponent.prototype.setData = /**\n     * Attach data to the modal instance\n     *\n     * @param {?} data the data to attach\n     * @param {?=} force override potentially attached data\n     * @return {?} the modal component\n     */\n    function (data, force) {\n        if (!this.hasData() || (this.hasData() && force)) {\n            this._data = data;\n            this.onDataAdded.emit(this._data);\n            this.markForCheck();\n        }\n        return this;\n    };\n    /**\n     * Retrieve the data attached to the modal instance\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.getData = /**\n     * Retrieve the data attached to the modal instance\n     * @return {?}\n     */\n    function () {\n        return this._data;\n    };\n    /**\n     * Remove the data attached to the modal instance\n     *\n     * @return {?} the modal component\n     */\n    NgxSmartModalComponent.prototype.removeData = /**\n     * Remove the data attached to the modal instance\n     *\n     * @return {?} the modal component\n     */\n    function () {\n        this._data = undefined;\n        this.onDataRemoved.emit(true);\n        this.markForCheck();\n        return this;\n    };\n    /**\n     * Add body class modal opened\n     *\n     * @return {?} the modal component\n     */\n    NgxSmartModalComponent.prototype.addBodyClass = /**\n     * Add body class modal opened\n     *\n     * @return {?} the modal component\n     */\n    function () {\n        this._renderer.addClass(this._document.body, NgxSmartModalConfig.bodyClassOpen);\n        return this;\n    };\n    /**\n     * Add body class modal opened\n     *\n     * @return {?} the modal component\n     */\n    NgxSmartModalComponent.prototype.removeBodyClass = /**\n     * Add body class modal opened\n     *\n     * @return {?} the modal component\n     */\n    function () {\n        this._renderer.removeClass(this._document.body, NgxSmartModalConfig.bodyClassOpen);\n        return this;\n    };\n    /**\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.markForCheck = /**\n     * @return {?}\n     */\n    function () {\n        try {\n            this._changeDetectorRef.detectChanges();\n        }\n        catch (/** @type {?} */ e) {\n        }\n        this._changeDetectorRef.markForCheck();\n    };\n    /**\n     * Listens for window resize event and recalculates modal instance position if it is element-relative\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.targetPlacement = /**\n     * Listens for window resize event and recalculates modal instance position if it is element-relative\n     * @return {?}\n     */\n    function () {\n        if (!this.isBrowser || !this.nsmDialog.length || !this.nsmContent.length || !this.nsmOverlay.length || !this.target) {\n            return false;\n        }\n        var /** @type {?} */ targetElement = this._document.querySelector(this.target);\n        if (!targetElement) {\n            return false;\n        }\n        var /** @type {?} */ targetElementRect = targetElement.getBoundingClientRect();\n        var /** @type {?} */ bodyRect = this.nsmOverlay.first.nativeElement.getBoundingClientRect();\n        var /** @type {?} */ nsmContentRect = this.nsmContent.first.nativeElement.getBoundingClientRect();\n        var /** @type {?} */ nsmDialogRect = this.nsmDialog.first.nativeElement.getBoundingClientRect();\n        var /** @type {?} */ marginLeft = parseInt(/** @type {?} */ (getComputedStyle(this.nsmContent.first.nativeElement).marginLeft), 10);\n        var /** @type {?} */ marginTop = parseInt(/** @type {?} */ (getComputedStyle(this.nsmContent.first.nativeElement).marginTop), 10);\n        var /** @type {?} */ offsetTop = targetElementRect.top - nsmDialogRect.top - ((nsmContentRect.height - targetElementRect.height) / 2);\n        var /** @type {?} */ offsetLeft = targetElementRect.left - nsmDialogRect.left - ((nsmContentRect.width - targetElementRect.width) / 2);\n        if (offsetLeft + nsmDialogRect.left + nsmContentRect.width + (marginLeft * 2) > bodyRect.width) {\n            offsetLeft = bodyRect.width - (nsmDialogRect.left + nsmContentRect.width) - (marginLeft * 2);\n        }\n        else if (offsetLeft + nsmDialogRect.left < 0) {\n            offsetLeft = -nsmDialogRect.left;\n        }\n        if (offsetTop + nsmDialogRect.top + nsmContentRect.height + marginTop > bodyRect.height) {\n            offsetTop = bodyRect.height - (nsmDialogRect.top + nsmContentRect.height) - marginTop;\n        }\n        this._renderer.setStyle(this.nsmContent.first.nativeElement, 'top', (offsetTop < 0 ? 0 : offsetTop) + 'px');\n        this._renderer.setStyle(this.nsmContent.first.nativeElement, 'left', offsetLeft + 'px');\n    };\n    /**\n     * @param {?} name\n     * @param {?=} extraData\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype._sendEvent = /**\n     * @param {?} name\n     * @param {?=} extraData\n     * @return {?}\n     */\n    function (name, extraData) {\n        if (!this.isBrowser) {\n            return false;\n        }\n        var /** @type {?} */ data = {\n            extraData: extraData,\n            instance: { id: this.identifier, modal: this }\n        };\n        var /** @type {?} */ event = new CustomEvent(NgxSmartModalConfig.prefixEvent + name, { detail: data });\n        return window.dispatchEvent(event);\n    };\n    Object.defineProperty(NgxSmartModalComponent.prototype, \"isBrowser\", {\n        get: /**\n         * Is current platform browser\n         * @return {?}\n         */\n        function () {\n            return common.isPlatformBrowser(this._platformId);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NgxSmartModalComponent.decorators = [\n        { type: core.Component, args: [{\n                    selector: 'ngx-smart-modal',\n                    template: \"\\n    <div *ngIf=\\\"overlayVisible\\\"\\n         [style.z-index]=\\\"visible ? layerPosition-1 : -1\\\"\\n         [ngClass]=\\\"{'transparent':!backdrop, 'overlay':true, 'nsm-overlay-open':openedClass}\\\"\\n         (mousedown)=\\\"dismiss($event)\\\" #nsmOverlay>\\n      <div [style.z-index]=\\\"visible ? layerPosition : -1\\\"\\n           [ngClass]=\\\"['nsm-dialog', customClass, openedClass ? 'nsm-dialog-open': 'nsm-dialog-close']\\\" #nsmDialog\\n           [attr.aria-hidden]=\\\"openedClass ? false : true\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledBy\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedBy\\\">\\n        <div class=\\\"nsm-content\\\" #nsmContent>\\n          <div class=\\\"nsm-body\\\">\\n            <ng-content></ng-content>\\n          </div>\\n          <button type=\\\"button\\\" *ngIf=\\\"closable\\\" (click)=\\\"close()\\\" aria-label=\\\"Close\\\" class=\\\"nsm-dialog-btn-close\\\">\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" version=\\\"1.1\\\" id=\\\"Layer_1\\\" x=\\\"0px\\\" y=\\\"0px\\\" viewBox=\\\"0 0 512 512\\\"\\n                 xml:space=\\\"preserve\\\" width=\\\"16px\\\" height=\\\"16px\\\">\\n              <g>\\n                <path d=\\\"M505.943,6.058c-8.077-8.077-21.172-8.077-29.249,0L6.058,476.693c-8.077,8.077-8.077,21.172,0,29.249    C10.096,509.982,15.39,512,20.683,512c5.293,0,10.586-2.019,14.625-6.059L505.943,35.306    C514.019,27.23,514.019,14.135,505.943,6.058z\\\"\\n                      fill=\\\"currentColor\\\"/>\\n              </g>\\n              <g>\\n                <path d=\\\"M505.942,476.694L35.306,6.059c-8.076-8.077-21.172-8.077-29.248,0c-8.077,8.076-8.077,21.171,0,29.248l470.636,470.636    c4.038,4.039,9.332,6.058,14.625,6.058c5.293,0,10.587-2.019,14.624-6.057C514.018,497.866,514.018,484.771,505.942,476.694z\\\"\\n                      fill=\\\"currentColor\\\"/>\\n              </g>\\n            </svg>\\n          </button>\\n        </div>\\n      </div>\\n    </div>\\n  \"\n                },] },\n    ];\n    /** @nocollapse */\n    NgxSmartModalComponent.ctorParameters = function () { return [\n        { type: core.Renderer2, },\n        { type: core.ChangeDetectorRef, },\n        { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] },] },\n        { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] },] },\n    ]; };\n    NgxSmartModalComponent.propDecorators = {\n        \"closable\": [{ type: core.Input },],\n        \"escapable\": [{ type: core.Input },],\n        \"dismissable\": [{ type: core.Input },],\n        \"identifier\": [{ type: core.Input },],\n        \"customClass\": [{ type: core.Input },],\n        \"visible\": [{ type: core.Input },],\n        \"backdrop\": [{ type: core.Input },],\n        \"force\": [{ type: core.Input },],\n        \"hideDelay\": [{ type: core.Input },],\n        \"autostart\": [{ type: core.Input },],\n        \"target\": [{ type: core.Input },],\n        \"ariaLabel\": [{ type: core.Input },],\n        \"ariaLabelledBy\": [{ type: core.Input },],\n        \"ariaDescribedBy\": [{ type: core.Input },],\n        \"visibleChange\": [{ type: core.Output },],\n        \"onClose\": [{ type: core.Output },],\n        \"onCloseFinished\": [{ type: core.Output },],\n        \"onDismiss\": [{ type: core.Output },],\n        \"onDismissFinished\": [{ type: core.Output },],\n        \"onAnyCloseEvent\": [{ type: core.Output },],\n        \"onAnyCloseEventFinished\": [{ type: core.Output },],\n        \"onOpen\": [{ type: core.Output },],\n        \"onOpenFinished\": [{ type: core.Output },],\n        \"onEscape\": [{ type: core.Output },],\n        \"onDataAdded\": [{ type: core.Output },],\n        \"onDataRemoved\": [{ type: core.Output },],\n        \"nsmContent\": [{ type: core.ViewChildren, args: ['nsmContent',] },],\n        \"nsmDialog\": [{ type: core.ViewChildren, args: ['nsmDialog',] },],\n        \"nsmOverlay\": [{ type: core.ViewChildren, args: ['nsmOverlay',] },],\n        \"targetPlacement\": [{ type: core.HostListener, args: ['window:resize',] },],\n    };\n    return NgxSmartModalComponent;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NgxSmartModalStackService = (function () {\n    function NgxSmartModalStackService() {\n        this._modalStack = [];\n    }\n    /**\n     * Add a new modal instance. This step is essential and allows to retrieve any modal at any time.\n     * It stores an object that contains the given modal identifier and the modal itself directly in the `modalStack`.\n     *\n     * @param {?} modalInstance The object that contains the given modal identifier and the modal itself.\n     * @param {?=} force Optional parameter that forces the overriding of modal instance if it already exists.\n     * @return {?} nothing special.\n     */\n    NgxSmartModalStackService.prototype.addModal = /**\n     * Add a new modal instance. This step is essential and allows to retrieve any modal at any time.\n     * It stores an object that contains the given modal identifier and the modal itself directly in the `modalStack`.\n     *\n     * @param {?} modalInstance The object that contains the given modal identifier and the modal itself.\n     * @param {?=} force Optional parameter that forces the overriding of modal instance if it already exists.\n     * @return {?} nothing special.\n     */\n    function (modalInstance, force) {\n        if (force) {\n            var /** @type {?} */ i = this._modalStack.findIndex(function (o) { return o.id === modalInstance.id; });\n            if (i > -1) {\n                this._modalStack[i].modal = modalInstance.modal;\n            }\n            else {\n                this._modalStack.push(modalInstance);\n            }\n            return;\n        }\n        this._modalStack.push(modalInstance);\n    };\n    /**\n     * Retrieve a modal instance by its identifier.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?}\n     */\n    NgxSmartModalStackService.prototype.getModal = /**\n     * Retrieve a modal instance by its identifier.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?}\n     */\n    function (id) {\n        var /** @type {?} */ i = this._modalStack.find(function (o) { return o.id === id; });\n        if (i !== undefined) {\n            return i.modal;\n        }\n        else {\n            throw new Error(\"Cannot find modal with identifier \" + id);\n        }\n    };\n    /**\n     * Retrieve all the created modals.\n     *\n     * @return {?} an array that contains all modal instances.\n     */\n    NgxSmartModalStackService.prototype.getModalStack = /**\n     * Retrieve all the created modals.\n     *\n     * @return {?} an array that contains all modal instances.\n     */\n    function () {\n        return this._modalStack;\n    };\n    /**\n     * Retrieve all the opened modals. It looks for all modal instances with their `visible` property set to `true`.\n     *\n     * @return {?} an array that contains all the opened modals.\n     */\n    NgxSmartModalStackService.prototype.getOpenedModals = /**\n     * Retrieve all the opened modals. It looks for all modal instances with their `visible` property set to `true`.\n     *\n     * @return {?} an array that contains all the opened modals.\n     */\n    function () {\n        return this._modalStack.filter(function (o) { return o.modal.visible; });\n    };\n    /**\n     * Retrieve the opened modal with highest z-index.\n     *\n     * @return {?} the opened modal with highest z-index.\n     */\n    NgxSmartModalStackService.prototype.getTopOpenedModal = /**\n     * Retrieve the opened modal with highest z-index.\n     *\n     * @return {?} the opened modal with highest z-index.\n     */\n    function () {\n        if (!this.getOpenedModals().length) {\n            throw new Error('No modal is opened');\n        }\n        return this.getOpenedModals()\n            .map(function (o) { return o.modal; })\n            .reduce(function (highest, item) { return item.layerPosition > highest.layerPosition ? item : highest; }, this.getOpenedModals()[0].modal);\n    };\n    /**\n     * Get the higher `z-index` value between all the modal instances. It iterates over the `ModalStack` array and\n     * calculates a higher value (it takes the highest index value between all the modal instances and adds 1).\n     * Use it to make a modal appear foreground.\n     *\n     * @return {?} a higher index from all the existing modal instances.\n     */\n    NgxSmartModalStackService.prototype.getHigherIndex = /**\n     * Get the higher `z-index` value between all the modal instances. It iterates over the `ModalStack` array and\n     * calculates a higher value (it takes the highest index value between all the modal instances and adds 1).\n     * Use it to make a modal appear foreground.\n     *\n     * @return {?} a higher index from all the existing modal instances.\n     */\n    function () {\n        return Math.max.apply(Math, this._modalStack.map(function (o) { return o.modal.layerPosition; }).concat([1041])) + 1;\n    };\n    /**\n     * It gives the number of modal instances. It's helpful to know if the modal stack is empty or not.\n     *\n     * @return {?} the number of modal instances.\n     */\n    NgxSmartModalStackService.prototype.getModalStackCount = /**\n     * It gives the number of modal instances. It's helpful to know if the modal stack is empty or not.\n     *\n     * @return {?} the number of modal instances.\n     */\n    function () {\n        return this._modalStack.length;\n    };\n    /**\n     * Remove a modal instance from the modal stack.\n     *\n     * @param {?} id The modal identifier.\n     * @return {?} the removed modal instance.\n     */\n    NgxSmartModalStackService.prototype.removeModal = /**\n     * Remove a modal instance from the modal stack.\n     *\n     * @param {?} id The modal identifier.\n     * @return {?} the removed modal instance.\n     */\n    function (id) {\n        var /** @type {?} */ i = this._modalStack.findIndex(function (o) { return o.id === id; });\n        if (i > -1) {\n            this._modalStack.splice(i, 1);\n        }\n    };\n    NgxSmartModalStackService.decorators = [\n        { type: core.Injectable },\n    ];\n    /** @nocollapse */\n    NgxSmartModalStackService.ctorParameters = function () { return []; };\n    return NgxSmartModalStackService;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NgxSmartModalService = (function () {\n    function NgxSmartModalService(_componentFactoryResolver, _appRef, _injector, _document, _modalStack, _platformId) {\n        var _this = this;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._injector = _injector;\n        this._document = _document;\n        this._modalStack = _modalStack;\n        this._platformId = _platformId;\n        /**\n         * Close the latest opened modal if escape key event is emitted\n         * @param event The Keyboard Event\n         */\n        this._escapeKeyboardEvent = function (event) {\n            if (event.key === 'Escape') {\n                try {\n                    var /** @type {?} */ modal = _this.getTopOpenedModal();\n                    if (!modal.escapable) {\n                        return false;\n                    }\n                    modal.onEscape.emit(modal);\n                    _this.closeLatestModal();\n                    return true;\n                }\n                catch (/** @type {?} */ e) {\n                    return false;\n                }\n            }\n            return false;\n        };\n        /**\n         * While modal is open, the focus stay on it\n         * @param event The Keyboar dEvent\n         */\n        this._trapFocusModal = function (event) {\n            if (event.key === 'Tab') {\n                try {\n                    var /** @type {?} */ modal = _this.getTopOpenedModal();\n                    if (!modal.nsmDialog.first.nativeElement.contains(document.activeElement)) {\n                        event.preventDefault();\n                        event.stopPropagation();\n                        modal.nsmDialog.first.nativeElement.focus();\n                    }\n                    return true;\n                }\n                catch (/** @type {?} */ e) {\n                    return false;\n                }\n            }\n            return false;\n        };\n        this._addEvents();\n    }\n    /**\n     * Add a new modal instance. This step is essential and allows to retrieve any modal at any time.\n     * It stores an object that contains the given modal identifier and the modal itself directly in the `modalStack`.\n     *\n     * @param {?} modalInstance The object that contains the given modal identifier and the modal itself.\n     * @param {?=} force Optional parameter that forces the overriding of modal instance if it already exists.\n     * @return {?} nothing special.\n     */\n    NgxSmartModalService.prototype.addModal = /**\n     * Add a new modal instance. This step is essential and allows to retrieve any modal at any time.\n     * It stores an object that contains the given modal identifier and the modal itself directly in the `modalStack`.\n     *\n     * @param {?} modalInstance The object that contains the given modal identifier and the modal itself.\n     * @param {?=} force Optional parameter that forces the overriding of modal instance if it already exists.\n     * @return {?} nothing special.\n     */\n    function (modalInstance, force) {\n        this._modalStack.addModal(modalInstance, force);\n    };\n    /**\n     * Retrieve a modal instance by its identifier.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?}\n     */\n    NgxSmartModalService.prototype.getModal = /**\n     * Retrieve a modal instance by its identifier.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?}\n     */\n    function (id) {\n        return this._modalStack.getModal(id);\n    };\n    /**\n     * Alias of `getModal` to retrieve a modal instance by its identifier.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?}\n     */\n    NgxSmartModalService.prototype.get = /**\n     * Alias of `getModal` to retrieve a modal instance by its identifier.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?}\n     */\n    function (id) {\n        return this.getModal(id);\n    };\n    /**\n     * Open a given modal\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @param {?=} force Tell the modal to open top of all other opened modals\n     * @return {?}\n     */\n    NgxSmartModalService.prototype.open = /**\n     * Open a given modal\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @param {?=} force Tell the modal to open top of all other opened modals\n     * @return {?}\n     */\n    function (id, force) {\n        if (force === void 0) { force = false; }\n        return this._openModal(this.get(id), force);\n    };\n    /**\n     * Close a given modal\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?}\n     */\n    NgxSmartModalService.prototype.close = /**\n     * Close a given modal\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?}\n     */\n    function (id) {\n        return this._closeModal(this.get(id));\n    };\n    /**\n     * Close all opened modals\n     * @return {?}\n     */\n    NgxSmartModalService.prototype.closeAll = /**\n     * Close all opened modals\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this.getOpenedModals().forEach(function (instance) {\n            _this._closeModal(instance.modal);\n        });\n    };\n    /**\n     * Toggles a given modal\n     * If the retrieved modal is opened it closes it, else it opens it.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @param {?=} force Tell the modal to open top of all other opened modals\n     * @return {?}\n     */\n    NgxSmartModalService.prototype.toggle = /**\n     * Toggles a given modal\n     * If the retrieved modal is opened it closes it, else it opens it.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @param {?=} force Tell the modal to open top of all other opened modals\n     * @return {?}\n     */\n    function (id, force) {\n        if (force === void 0) { force = false; }\n        return this._toggleModal(this.get(id), force);\n    };\n    /**\n     * Retrieve all the created modals.\n     *\n     * @return {?} an array that contains all modal instances.\n     */\n    NgxSmartModalService.prototype.getModalStack = /**\n     * Retrieve all the created modals.\n     *\n     * @return {?} an array that contains all modal instances.\n     */\n    function () {\n        return this._modalStack.getModalStack();\n    };\n    /**\n     * Retrieve all the opened modals. It looks for all modal instances with their `visible` property set to `true`.\n     *\n     * @return {?} an array that contains all the opened modals.\n     */\n    NgxSmartModalService.prototype.getOpenedModals = /**\n     * Retrieve all the opened modals. It looks for all modal instances with their `visible` property set to `true`.\n     *\n     * @return {?} an array that contains all the opened modals.\n     */\n    function () {\n        return this._modalStack.getOpenedModals();\n    };\n    /**\n     * Retrieve the opened modal with highest z-index.\n     *\n     * @return {?} the opened modal with highest z-index.\n     */\n    NgxSmartModalService.prototype.getTopOpenedModal = /**\n     * Retrieve the opened modal with highest z-index.\n     *\n     * @return {?} the opened modal with highest z-index.\n     */\n    function () {\n        return this._modalStack.getTopOpenedModal();\n    };\n    /**\n     * Get the higher `z-index` value between all the modal instances. It iterates over the `ModalStack` array and\n     * calculates a higher value (it takes the highest index value between all the modal instances and adds 1).\n     * Use it to make a modal appear foreground.\n     *\n     * @return {?} a higher index from all the existing modal instances.\n     */\n    NgxSmartModalService.prototype.getHigherIndex = /**\n     * Get the higher `z-index` value between all the modal instances. It iterates over the `ModalStack` array and\n     * calculates a higher value (it takes the highest index value between all the modal instances and adds 1).\n     * Use it to make a modal appear foreground.\n     *\n     * @return {?} a higher index from all the existing modal instances.\n     */\n    function () {\n        return this._modalStack.getHigherIndex();\n    };\n    /**\n     * It gives the number of modal instances. It's helpful to know if the modal stack is empty or not.\n     *\n     * @return {?} the number of modal instances.\n     */\n    NgxSmartModalService.prototype.getModalStackCount = /**\n     * It gives the number of modal instances. It's helpful to know if the modal stack is empty or not.\n     *\n     * @return {?} the number of modal instances.\n     */\n    function () {\n        return this._modalStack.getModalStackCount();\n    };\n    /**\n     * Remove a modal instance from the modal stack.\n     *\n     * @param {?} id The modal identifier.\n     * @return {?} the removed modal instance.\n     */\n    NgxSmartModalService.prototype.removeModal = /**\n     * Remove a modal instance from the modal stack.\n     *\n     * @param {?} id The modal identifier.\n     * @return {?} the removed modal instance.\n     */\n    function (id) {\n        this._modalStack.removeModal(id);\n    };\n    /**\n     * Associate data to an identified modal. If the modal isn't already associated to some data, it creates a new\n     * entry in the `modalData` array with its `id` and the given `data`. If the modal already has data, it rewrites\n     * them with the new ones. Finally if no modal found it returns an error message in the console and false value\n     * as method output.\n     *\n     * @param {?} data The data you want to associate to the modal.\n     * @param {?} id The modal identifier.\n     * @param {?=} force If true, overrides the previous stored data if there was.\n     * @return {?} true if the given modal exists and the process has been tried, either false.\n     */\n    NgxSmartModalService.prototype.setModalData = /**\n     * Associate data to an identified modal. If the modal isn't already associated to some data, it creates a new\n     * entry in the `modalData` array with its `id` and the given `data`. If the modal already has data, it rewrites\n     * them with the new ones. Finally if no modal found it returns an error message in the console and false value\n     * as method output.\n     *\n     * @param {?} data The data you want to associate to the modal.\n     * @param {?} id The modal identifier.\n     * @param {?=} force If true, overrides the previous stored data if there was.\n     * @return {?} true if the given modal exists and the process has been tried, either false.\n     */\n    function (data, id, force) {\n        var /** @type {?} */ i;\n        if (i = this.get(id)) {\n            i.setData(data, force);\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * Retrieve modal data by its identifier.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?} the associated modal data.\n     */\n    NgxSmartModalService.prototype.getModalData = /**\n     * Retrieve modal data by its identifier.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?} the associated modal data.\n     */\n    function (id) {\n        var /** @type {?} */ i;\n        if (i = this.get(id)) {\n            return i.getData();\n        }\n        return null;\n    };\n    /**\n     * Reset the data attached to a given modal.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?} the removed data or false if modal doesn't exist.\n     */\n    NgxSmartModalService.prototype.resetModalData = /**\n     * Reset the data attached to a given modal.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?} the removed data or false if modal doesn't exist.\n     */\n    function (id) {\n        if (!!this._modalStack.getModalStack().find(function (o) { return o.id === id; })) {\n            var /** @type {?} */ removed = this.getModal(id).getData();\n            this.getModal(id).removeData();\n            return removed;\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * Close the latest opened modal if it has been declared as escapable\n     * Using a debounce system because one or more modals could be listening\n     * escape key press event.\n     * @return {?}\n     */\n    NgxSmartModalService.prototype.closeLatestModal = /**\n     * Close the latest opened modal if it has been declared as escapable\n     * Using a debounce system because one or more modals could be listening\n     * escape key press event.\n     * @return {?}\n     */\n    function () {\n        this.getTopOpenedModal().close();\n    };\n    /**\n     * Create dynamic NgxSmartModalComponent\n     * @template T\n     * @param {?} id The modal identifier used at creation time.\n     * @param {?} content The modal content ( string, templateRef or Component )\n     * @param {?=} options\n     * @return {?}\n     */\n    NgxSmartModalService.prototype.create = /**\n     * Create dynamic NgxSmartModalComponent\n     * @template T\n     * @param {?} id The modal identifier used at creation time.\n     * @param {?} content The modal content ( string, templateRef or Component )\n     * @param {?=} options\n     * @return {?}\n     */\n    function (id, content, options) {\n        if (options === void 0) { options = {}; }\n        try {\n            return this.getModal(id);\n        }\n        catch (/** @type {?} */ e) {\n            var /** @type {?} */ componentFactory = this._componentFactoryResolver.resolveComponentFactory(NgxSmartModalComponent);\n            var /** @type {?} */ ngContent = this._resolveNgContent(content);\n            var /** @type {?} */ componentRef = componentFactory.create(this._injector, ngContent);\n            componentRef.instance.identifier = id;\n            componentRef.instance.createFrom = 'service';\n            if (typeof options.closable === 'boolean') {\n                componentRef.instance.closable = options.closable;\n            }\n            if (typeof options.escapable === 'boolean') {\n                componentRef.instance.escapable = options.escapable;\n            }\n            if (typeof options.dismissable === 'boolean') {\n                componentRef.instance.dismissable = options.dismissable;\n            }\n            if (typeof options.customClass === 'string') {\n                componentRef.instance.customClass = options.customClass;\n            }\n            if (typeof options.backdrop === 'boolean') {\n                componentRef.instance.backdrop = options.backdrop;\n            }\n            if (typeof options.force === 'boolean') {\n                componentRef.instance.force = options.force;\n            }\n            if (typeof options.hideDelay === 'number') {\n                componentRef.instance.hideDelay = options.hideDelay;\n            }\n            if (typeof options.autostart === 'boolean') {\n                componentRef.instance.autostart = options.autostart;\n            }\n            if (typeof options.target === 'string') {\n                componentRef.instance.target = options.target;\n            }\n            if (typeof options.ariaLabel === 'string') {\n                componentRef.instance.ariaLabel = options.ariaLabel;\n            }\n            if (typeof options.ariaLabelledBy === 'string') {\n                componentRef.instance.ariaLabelledBy = options.ariaLabelledBy;\n            }\n            if (typeof options.ariaDescribedBy === 'string') {\n                componentRef.instance.ariaDescribedBy = options.ariaDescribedBy;\n            }\n            this._appRef.attachView(componentRef.hostView);\n            var /** @type {?} */ domElem = /** @type {?} */ ((/** @type {?} */ (componentRef.hostView)).rootNodes[0]);\n            this._document.body.appendChild(domElem);\n            return componentRef.instance;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgxSmartModalService.prototype._addEvents = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!this.isBrowser) {\n            return false;\n        }\n        window.addEventListener(NgxSmartModalConfig.prefixEvent + 'create', /** @type {?} */ ((function (e) {\n            _this._initModal(e.detail.instance);\n        })));\n        window.addEventListener(NgxSmartModalConfig.prefixEvent + 'delete', /** @type {?} */ ((function (e) {\n            _this._deleteModal(e.detail.instance);\n        })));\n        window.addEventListener(NgxSmartModalConfig.prefixEvent + 'open', /** @type {?} */ ((function (e) {\n            _this._openModal(e.detail.instance.modal, e.detail.top);\n        })));\n        window.addEventListener(NgxSmartModalConfig.prefixEvent + 'toggle', /** @type {?} */ ((function (e) {\n            _this._toggleModal(e.detail.instance.modal, e.detail.top);\n        })));\n        window.addEventListener(NgxSmartModalConfig.prefixEvent + 'close', /** @type {?} */ ((function (e) {\n            _this._closeModal(e.detail.instance.modal);\n        })));\n        window.addEventListener(NgxSmartModalConfig.prefixEvent + 'dismiss', /** @type {?} */ ((function (e) {\n            _this._dismissModal(e.detail.instance.modal);\n        })));\n        window.addEventListener('keyup', this._escapeKeyboardEvent);\n        return true;\n    };\n    /**\n     * @param {?} modalInstance\n     * @return {?}\n     */\n    NgxSmartModalService.prototype._initModal = /**\n     * @param {?} modalInstance\n     * @return {?}\n     */\n    function (modalInstance) {\n        modalInstance.modal.layerPosition += this.getModalStackCount();\n        this.addModal(modalInstance, modalInstance.modal.force);\n        if (modalInstance.modal.autostart) {\n            this.open(modalInstance.id);\n        }\n    };\n    /**\n     * @param {?} modal\n     * @param {?=} top\n     * @return {?}\n     */\n    NgxSmartModalService.prototype._openModal = /**\n     * @param {?} modal\n     * @param {?=} top\n     * @return {?}\n     */\n    function (modal, top) {\n        if (modal.visible) {\n            return false;\n        }\n        this.lastElementFocused = document.activeElement;\n        if (modal.escapable) {\n            window.addEventListener('keyup', this._escapeKeyboardEvent);\n        }\n        if (modal.backdrop) {\n            window.addEventListener('keydown', this._trapFocusModal);\n        }\n        if (top) {\n            modal.layerPosition = this.getHigherIndex();\n        }\n        modal.addBodyClass();\n        modal.overlayVisible = true;\n        modal.visible = true;\n        modal.onOpen.emit(modal);\n        modal.markForCheck();\n        setTimeout(function () {\n            modal.openedClass = true;\n            if (modal.target) {\n                modal.targetPlacement();\n            }\n            modal.nsmDialog.first.nativeElement.setAttribute('role', 'dialog');\n            modal.nsmDialog.first.nativeElement.setAttribute('tabIndex', '-1');\n            modal.nsmDialog.first.nativeElement.setAttribute('aria-modal', 'true');\n            modal.nsmDialog.first.nativeElement.focus();\n            modal.markForCheck();\n            modal.onOpenFinished.emit(modal);\n        });\n        return true;\n    };\n    /**\n     * @param {?} modal\n     * @param {?=} top\n     * @return {?}\n     */\n    NgxSmartModalService.prototype._toggleModal = /**\n     * @param {?} modal\n     * @param {?=} top\n     * @return {?}\n     */\n    function (modal, top) {\n        if (modal.visible) {\n            return this._closeModal(modal);\n        }\n        else {\n            return this._openModal(modal, top);\n        }\n    };\n    /**\n     * @param {?} modal\n     * @return {?}\n     */\n    NgxSmartModalService.prototype._closeModal = /**\n     * @param {?} modal\n     * @return {?}\n     */\n    function (modal) {\n        var _this = this;\n        if (!modal.openedClass) {\n            return false;\n        }\n        modal.openedClass = false;\n        modal.onClose.emit(modal);\n        modal.onAnyCloseEvent.emit(modal);\n        if (this.getOpenedModals().length < 2) {\n            modal.removeBodyClass();\n            window.removeEventListener('keyup', this._escapeKeyboardEvent);\n            window.removeEventListener('keydown', this._trapFocusModal);\n        }\n        setTimeout(function () {\n            modal.visibleChange.emit(modal.visible);\n            modal.visible = false;\n            modal.overlayVisible = false;\n            modal.nsmDialog.first.nativeElement.removeAttribute('tabIndex');\n            modal.markForCheck();\n            modal.onCloseFinished.emit(modal);\n            modal.onAnyCloseEventFinished.emit(modal);\n            _this.lastElementFocused.focus();\n        }, modal.hideDelay);\n        return true;\n    };\n    /**\n     * @param {?} modal\n     * @return {?}\n     */\n    NgxSmartModalService.prototype._dismissModal = /**\n     * @param {?} modal\n     * @return {?}\n     */\n    function (modal) {\n        if (!modal.openedClass) {\n            return false;\n        }\n        modal.openedClass = false;\n        modal.onDismiss.emit(modal);\n        modal.onAnyCloseEvent.emit(modal);\n        if (this.getOpenedModals().length < 2) {\n            modal.removeBodyClass();\n        }\n        setTimeout(function () {\n            modal.visible = false;\n            modal.visibleChange.emit(modal.visible);\n            modal.overlayVisible = false;\n            modal.markForCheck();\n            modal.onDismissFinished.emit(modal);\n            modal.onAnyCloseEventFinished.emit(modal);\n        }, modal.hideDelay);\n        return true;\n    };\n    /**\n     * @param {?} modalInstance\n     * @return {?}\n     */\n    NgxSmartModalService.prototype._deleteModal = /**\n     * @param {?} modalInstance\n     * @return {?}\n     */\n    function (modalInstance) {\n        this.removeModal(modalInstance.id);\n        if (!this.getModalStack().length) {\n            modalInstance.modal.removeBodyClass();\n        }\n    };\n    /**\n     * Resolve content according to the types\n     * @template T\n     * @param {?} content The modal content ( string, templateRef or Component )\n     * @return {?}\n     */\n    NgxSmartModalService.prototype._resolveNgContent = /**\n     * Resolve content according to the types\n     * @template T\n     * @param {?} content The modal content ( string, templateRef or Component )\n     * @return {?}\n     */\n    function (content) {\n        if (typeof content === 'string') {\n            var /** @type {?} */ element = this._document.createTextNode(content);\n            return [[element]];\n        }\n        if (content instanceof core.TemplateRef) {\n            var /** @type {?} */ viewRef = content.createEmbeddedView(/** @type {?} */ (null));\n            return [viewRef.rootNodes];\n        }\n        var /** @type {?} */ factory = this._componentFactoryResolver.resolveComponentFactory(content);\n        var /** @type {?} */ componentRef = factory.create(this._injector);\n        return [[componentRef.location.nativeElement], [this._document.createTextNode('')]];\n    };\n    Object.defineProperty(NgxSmartModalService.prototype, \"isBrowser\", {\n        get: /**\n         * Is current platform browser\n         * @return {?}\n         */\n        function () {\n            return common.isPlatformBrowser(this._platformId);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NgxSmartModalService.decorators = [\n        { type: core.Injectable },\n    ];\n    /** @nocollapse */\n    NgxSmartModalService.ctorParameters = function () { return [\n        { type: core.ComponentFactoryResolver, },\n        { type: core.ApplicationRef, },\n        { type: core.Injector, },\n        { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] },] },\n        { type: NgxSmartModalStackService, },\n        { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] },] },\n    ]; };\n    return NgxSmartModalService;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NgxSmartModalModule = (function () {\n    function NgxSmartModalModule(serivce) {\n        this.serivce = serivce;\n    }\n    /**\n     * Use in AppModule: new instance of NgxSmartModal.\n     * @return {?}\n     */\n    NgxSmartModalModule.forRoot = /**\n     * Use in AppModule: new instance of NgxSmartModal.\n     * @return {?}\n     */\n    function () {\n        return {\n            ngModule: NgxSmartModalModule,\n            providers: [\n                NgxSmartModalService,\n                NgxSmartModalStackService\n            ]\n        };\n    };\n    /**\n     * Use in features modules with lazy loading: new instance of NgxSmartModal.\n     * @return {?}\n     */\n    NgxSmartModalModule.forChild = /**\n     * Use in features modules with lazy loading: new instance of NgxSmartModal.\n     * @return {?}\n     */\n    function () {\n        return {\n            ngModule: NgxSmartModalModule,\n            providers: [\n                NgxSmartModalService,\n                NgxSmartModalStackService\n            ]\n        };\n    };\n    NgxSmartModalModule.decorators = [\n        { type: core.NgModule, args: [{\n                    declarations: [NgxSmartModalComponent],\n                    entryComponents: [NgxSmartModalComponent],\n                    exports: [NgxSmartModalComponent],\n                    imports: [common.CommonModule]\n                },] },\n    ];\n    /** @nocollapse */\n    NgxSmartModalModule.ctorParameters = function () { return [\n        { type: NgxSmartModalService, },\n    ]; };\n    return NgxSmartModalModule;\n}());\n\nexports.NgxSmartModalService = NgxSmartModalService;\nexports.NgxSmartModalComponent = NgxSmartModalComponent;\nexports.NgxSmartModalModule = NgxSmartModalModule;\nexports.NgxSmartModalConfig = NgxSmartModalConfig;\nexports.Éµa = NgxSmartModalStackService;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=ngx-smart-modal.umd.js.map\n"]}